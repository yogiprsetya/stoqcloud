openapi: 3.0.3
info:
  title: StoqCloud API
  version: 0.1.0
  description: |
    API documentation for StoqCloud inventory management system.
    All endpoints are Next.js Route Handlers under the `/api` path.
servers:
  - url: http://localhost:3000
    description: Local
  - url: https://your-production-domain
    description: Production
tags:
  - name: Auth
  - name: Category
  - name: Supplier
  - name: SKU
  - name: Users
  - name: Stock In
  - name: Stock Out
  - name: Analytics
  - name: Reports
  - name: Alerts
components:
  securitySchemes:
    sessionAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    Meta:
      type: object
      properties:
        page:
          type: integer
          example: 1
        perPage:
          type: integer
          example: 10
        total:
          type: integer
          example: 123
    SuccessResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
        meta:
          $ref: '#/components/schemas/Meta'
        data:
          description: Payload data
    ErrorResponse:
      type: object
      properties:
        success:
          type: boolean
          example: false
        message:
          type: string
          example: Invalid request
        errors:
          nullable: true
    Category:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
    Supplier:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
    SKU:
      type: object
      properties:
        id:
          type: string
        skuCode:
          type: string
        name:
          type: string
        category:
          type: object
          properties:
            id:
              type: string
            name:
              type: string
        supplier:
          type: object
          properties:
            id:
              type: string
            name:
              type: string
        costPrice:
          type: string
          description: Stored as string in DB
        stock:
          type: integer
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
    StockTransaction:
      type: object
      properties:
        id:
          type: string
        skuId:
          type: string
        type:
          type: string
          enum: [IN, OUT]
        quantity:
          type: integer
        unitPrice:
          type: string
        totalPrice:
          type: string
        documentNumber:
          type: string
          nullable: true
        notes:
          type: string
          nullable: true
        createdBy:
          type: object
          nullable: true
          properties:
            id: { type: string }
            name: { type: string }
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
        sku:
          type: object
          properties:
            id: { type: string }
            skuCode: { type: string }
            name: { type: string }
        supplier:
          type: object
          nullable: true
          properties:
            id: { type: string }
            name: { type: string }
        category:
          type: object
          nullable: true
          properties:
            id: { type: string }
            name: { type: string }
paths:
  /api/auth/[...nextauth]:
    get:
      tags: [Auth]
      summary: NextAuth.js authentication endpoint (GET)
      description: Handles authentication callbacks and session management via NextAuth.js
      responses:
        '200': { description: Authentication response }
        '302': { description: Redirect response }
    post:
      tags: [Auth]
      summary: NextAuth.js authentication endpoint (POST)
      description: Handles authentication requests and session management via NextAuth.js
      responses:
        '200': { description: Authentication response }
        '302': { description: Redirect response }

  /api/category:
    get:
      tags: [Category]
      summary: List categories
      description: Retrieve a paginated list of product categories with optional search and sorting
      security: [{ sessionAuth: [] }]
      parameters:
        - in: query
          name: keyword
          schema: { type: string }
        - in: query
          name: page
          schema: { type: integer, minimum: 1 }
        - in: query
          name: sort
          schema: { type: string, enum: [asc, desc] }
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/SuccessResponse'
                  - type: object
                    properties:
                      data:
                        type: array
                        items: { $ref: '#/components/schemas/Category' }
        '401':
          {
            description: Unauthorized,
            content: { application/json: { schema: { $ref: '#/components/schemas/ErrorResponse' } } }
          }
    post:
      tags: [Category]
      summary: Create category
      description: Create a new product category
      security: [{ sessionAuth: [] }]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name: { type: string }
              required: [name]
      responses:
        '200':
          {
            description: Created,
            content: { application/json: { schema: { $ref: '#/components/schemas/SuccessResponse' } } }
          }
        '400':
          {
            description: Bad Request,
            content: { application/json: { schema: { $ref: '#/components/schemas/ErrorResponse' } } }
          }
        '401': { description: Unauthorized }

  /api/category/{id}:
    get:
      tags: [Category]
      summary: Get category by id
      security: [{ sessionAuth: [] }]
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: string }
      responses:
        '200':
          {
            description: OK,
            content: { application/json: { schema: { $ref: '#/components/schemas/SuccessResponse' } } }
          }
        '401': { description: Unauthorized }
    patch:
      tags: [Category]
      summary: Update category
      security: [{ sessionAuth: [] }]
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: string }
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name: { type: string }
      responses:
        '200': { description: OK }
        '400': { description: Bad Request }
        '401': { description: Unauthorized }
    delete:
      tags: [Category]
      summary: Delete category
      security: [{ sessionAuth: [] }]
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: string }
      responses:
        '200': { description: OK }
        '401': { description: Unauthorized }

  /api/supplier:
    get:
      tags: [Supplier]
      summary: List suppliers
      security: [{ sessionAuth: [] }]
      parameters:
        - in: query
          name: keyword
          schema: { type: string }
        - in: query
          name: page
          schema: { type: integer, minimum: 1 }
        - in: query
          name: sort
          schema: { type: string, enum: [asc, desc] }
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/SuccessResponse'
                  - type: object
                    properties:
                      data:
                        type: array
                        items: { $ref: '#/components/schemas/Supplier' }
        '401': { description: Unauthorized }
    post:
      tags: [Supplier]
      summary: Create supplier
      security: [{ sessionAuth: [] }]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name: { type: string }
              required: [name]
      responses:
        '200': { description: Created }
        '400': { description: Bad Request }
        '401': { description: Unauthorized }

  /api/supplier/{id}:
    get:
      tags: [Supplier]
      summary: Get supplier by id
      security: [{ sessionAuth: [] }]
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: string }
      responses:
        '200': { description: OK }
        '401': { description: Unauthorized }
    patch:
      tags: [Supplier]
      summary: Update supplier
      security: [{ sessionAuth: [] }]
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: string }
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name: { type: string }
      responses:
        '200': { description: OK }
        '400': { description: Bad Request }
        '401': { description: Unauthorized }
    delete:
      tags: [Supplier]
      summary: Delete supplier
      security: [{ sessionAuth: [] }]
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: string }
      responses:
        '200': { description: OK }
        '401': { description: Unauthorized }

  /api/sku:
    get:
      tags: [SKU]
      summary: List SKUs
      description: Retrieve a paginated list of SKUs (Stock Keeping Units) with category and supplier information
      security: [{ sessionAuth: [] }]
      parameters:
        - in: query
          name: keyword
          schema: { type: string }
        - in: query
          name: page
          schema: { type: integer, minimum: 1 }
        - in: query
          name: sort
          schema: { type: string, enum: [asc, desc] }
        - in: query
          name: sortBy
          schema: { type: string, enum: [name, createdAt] }
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/SuccessResponse'
                  - type: object
                    properties:
                      data:
                        type: array
                        items: { $ref: '#/components/schemas/SKU' }
        '401': { description: Unauthorized }
    post:
      tags: [SKU]
      summary: Create SKU
      security: [{ sessionAuth: [] }]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                skuCode: { type: string }
                name: { type: string }
                categoryId: { type: string }
                supplierId: { type: string }
                costPrice: { type: string }
              required: [skuCode, name]
      responses:
        '200': { description: Created }
        '400': { description: Bad Request }
        '401': { description: Unauthorized }

  /api/sku/{id}:
    get:
      tags: [SKU]
      summary: Get SKU by id
      security: [{ sessionAuth: [] }]
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: string }
      responses:
        '200': { description: OK }
        '401': { description: Unauthorized }
    patch:
      tags: [SKU]
      summary: Update SKU
      security: [{ sessionAuth: [] }]
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: string }
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
      responses:
        '200': { description: OK }
        '400': { description: Bad Request }
        '401': { description: Unauthorized }
    delete:
      tags: [SKU]
      summary: Delete SKU
      security: [{ sessionAuth: [] }]
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: string }
      responses:
        '200': { description: OK }
        '401': { description: Unauthorized }

  /api/users:
    get:
      tags: [Users]
      summary: List users (MANAGER only)
      description: Retrieve a paginated list of users. Only users with MANAGER role can access this endpoint
      security: [{ sessionAuth: [] }]
      parameters:
        - in: query
          name: keyword
          schema: { type: string }
        - in: query
          name: page
          schema: { type: integer, minimum: 1 }
        - in: query
          name: sort
          schema: { type: string, enum: [asc, desc] }
        - in: query
          name: sortBy
          schema: { type: string, enum: [name] }
      responses:
        '200': { description: OK }
        '401': { description: Unauthorized }
        '403': { description: Forbidden }
    post:
      tags: [Users]
      summary: Create user (MANAGER only)
      security: [{ sessionAuth: [] }]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name: { type: string }
                email: { type: string }
                role: { type: string, enum: [MANAGER, STAFF] }
              required: [name, email, role]
      responses:
        '200': { description: Created }
        '400': { description: Bad Request }
        '401': { description: Unauthorized }
        '403': { description: Forbidden }

  /api/users/{id}:
    get:
      tags: [Users]
      summary: Get user by id (MANAGER only)
      security: [{ sessionAuth: [] }]
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: string }
      responses:
        '200': { description: OK }
        '401': { description: Unauthorized }
        '403': { description: Forbidden }
    patch:
      tags: [Users]
      summary: Update user by id (MANAGER only)
      security: [{ sessionAuth: [] }]
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: string }
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
      responses:
        '200': { description: OK }
        '400': { description: Bad Request }
        '401': { description: Unauthorized }
        '403': { description: Forbidden }
    delete:
      tags: [Users]
      summary: Delete user by id (MANAGER only)
      security: [{ sessionAuth: [] }]
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: string }
      responses:
        '200': { description: OK }
        '401': { description: Unauthorized }
        '403': { description: Forbidden }

  /api/stock-in:
    get:
      tags: [Stock In]
      summary: List stock-in transactions
      description: Retrieve a paginated list of stock-in transactions with SKU, category, and supplier details
      security: [{ sessionAuth: [] }]
      parameters:
        - in: query
          name: keyword
          schema: { type: string }
        - in: query
          name: page
          schema: { type: integer, minimum: 1 }
        - in: query
          name: sort
          schema: { type: string, enum: [asc, desc] }
        - in: query
          name: sortBy
          schema: { type: string, enum: [createdAt, updatedAt] }
      responses:
        '200': { description: OK }
        '401': { description: Unauthorized }
    post:
      tags: [Stock In]
      summary: Create stock-in transaction
      description: Create a new stock-in transaction and automatically update SKU stock quantity
      security: [{ sessionAuth: [] }]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                skuId: { type: string }
                quantity: { type: integer }
                unitPrice: { type: number }
                totalPrice: { type: number }
                documentNumber: { type: string }
                notes: { type: string }
              required: [skuId, quantity]
      responses:
        '200': { description: Created }
        '400': { description: Bad Request }
        '401': { description: Unauthorized }

  /api/stock-in/{id}:
    get:
      tags: [Stock In]
      summary: Get stock-in transaction by id
      security: [{ sessionAuth: [] }]
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: string }
      responses:
        '200': { description: OK }
        '401': { description: Unauthorized }
    patch:
      tags: [Stock In]
      summary: Update stock-in transaction
      security: [{ sessionAuth: [] }]
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: string }
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
      responses:
        '200': { description: OK }
        '400': { description: Bad Request }
        '401': { description: Unauthorized }
    delete:
      tags: [Stock In]
      summary: Delete stock-in transaction
      security: [{ sessionAuth: [] }]
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: string }
      responses:
        '200': { description: OK }
        '401': { description: Unauthorized }

  /api/stock-out:
    get:
      tags: [Stock Out]
      summary: List stock-out transactions
      description: Retrieve a paginated list of stock-out transactions with SKU, category, and supplier details
      security: [{ sessionAuth: [] }]
      parameters:
        - in: query
          name: keyword
          schema: { type: string }
        - in: query
          name: page
          schema: { type: integer, minimum: 1 }
        - in: query
          name: sort
          schema: { type: string, enum: [asc, desc] }
        - in: query
          name: sortBy
          schema: { type: string, enum: [createdAt, updatedAt] }
      responses:
        '200': { description: OK }
        '401': { description: Unauthorized }
    post:
      tags: [Stock Out]
      summary: Create stock-out transaction
      description: Create a new stock-out transaction and automatically update SKU stock quantity (validates sufficient stock)
      security: [{ sessionAuth: [] }]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                skuId: { type: string }
                quantity: { type: integer }
                unitPrice: { type: number }
                totalPrice: { type: number }
                documentNumber: { type: string }
                notes: { type: string }
              required: [skuId, quantity]
      responses:
        '200': { description: Created }
        '400': { description: Bad Request }
        '401': { description: Unauthorized }

  /api/stock-out/{id}:
    get:
      tags: [Stock Out]
      summary: Get stock-out transaction by id
      security: [{ sessionAuth: [] }]
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: string }
      responses:
        '200': { description: OK }
        '401': { description: Unauthorized }
    patch:
      tags: [Stock Out]
      summary: Update stock-out transaction
      security: [{ sessionAuth: [] }]
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: string }
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
      responses:
        '200': { description: OK }
        '400': { description: Bad Request }
        '401': { description: Unauthorized }
    delete:
      tags: [Stock Out]
      summary: Delete stock-out transaction
      security: [{ sessionAuth: [] }]
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: string }
      responses:
        '200': { description: OK }
        '401': { description: Unauthorized }

  /api/stock-in/{id}/document:
    get:
      tags: [Stock In]
      summary: Download stock-in document as text file
      description: Downloads a formatted text document containing stock-in transaction details
      security: [{ sessionAuth: [] }]
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: string }
      responses:
        '200':
          description: Text document file
          content:
            text/plain:
              schema:
                type: string
                example: |
                  STOCK IN DOCUMENT
                  ===================
                  Document: DOC-001
                  SKU: SKU001 - Product Name
                  Category: Electronics
                  Supplier: Supplier Name
                  Quantity: +10
                  Unit Price: 100.00
                  Total Price: 1000.00
                  Created At: 2024-01-01T00:00:00.000Z
                  Created By: John Doe

                  Notes: Initial stock
          headers:
            Content-Disposition:
              description: Attachment filename
              schema:
                type: string
                example: 'attachment; filename="stock-in-DOC-001.txt"'
        '401': { description: Unauthorized }
        '404': { description: Not Found }

  /api/reports/stock:
    get:
      tags: [Reports]
      summary: Stock report
      description: Lists SKUs with stock, cost, and inventory value
      security: [{ sessionAuth: [] }]
      parameters:
        - in: query
          name: keyword
          schema: { type: string }
        - in: query
          name: page
          schema: { type: integer, minimum: 1 }
        - in: query
          name: sort
          schema: { type: string, enum: [asc, desc] }
        - in: query
          name: sortBy
          schema: { type: string, enum: [name, createdAt, stock] }
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/SuccessResponse'
                  - type: object
                    properties:
                      data:
                        type: array
                        items:
                          type: object
                          properties:
                            id: { type: string }
                            skuCode: { type: string }
                            name: { type: string }
                            stock: { type: integer }
                            costPrice: { type: string }
                            inventoryValue: { type: string }
                            category:
                              type: object
                              nullable: true
                              properties:
                                id: { type: string }
                                name: { type: string }
                            supplier:
                              type: object
                              nullable: true
                              properties:
                                id: { type: string }
                                name: { type: string }

  /api/reports/transactions:
    get:
      tags: [Reports]
      summary: Transactions report
      description: List stock transactions with filters and pagination
      security: [{ sessionAuth: [] }]
      parameters:
        - in: query
          name: keyword
          schema: { type: string }
        - in: query
          name: page
          schema: { type: integer, minimum: 1 }
        - in: query
          name: sort
          schema: { type: string, enum: [asc, desc] }
        - in: query
          name: sortBy
          schema: { type: string, enum: [createdAt, updatedAt, quantity] }
        - in: query
          name: type
          schema: { type: string, enum: [IN, OUT] }
        - in: query
          name: startDate
          schema: { type: string, format: date-time }
        - in: query
          name: endDate
          schema: { type: string, format: date-time }
        - in: query
          name: categoryId
          schema: { type: string }
        - in: query
          name: supplierId
          schema: { type: string }
        - in: query
          name: userId
          schema: { type: string }
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/SuccessResponse'
                  - type: object
                    properties:
                      data:
                        type: array
                        items: { $ref: '#/components/schemas/StockTransaction' }

  /api/alerts/low-stock:
    get:
      tags: [Alerts]
      summary: Low stock alerts
      description: List SKUs under threshold (default 10)
      security: [{ sessionAuth: [] }]
      parameters:
        - in: query
          name: keyword
          schema: { type: string }
        - in: query
          name: page
          schema: { type: integer, minimum: 1 }
        - in: query
          name: sort
          schema: { type: string, enum: [asc, desc] }
        - in: query
          name: threshold
          schema: { type: integer, minimum: 0 }
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/SuccessResponse'
                  - type: object
                    properties:
                      data:
                        type: array
                        items:
                          type: object
                          properties:
                            id: { type: string }
                            skuCode: { type: string }
                            name: { type: string }
                            stock: { type: integer }
                      meta: { $ref: '#/components/schemas/Meta' }

  /api/stock-out/{id}/document:
    get:
      tags: [Stock Out]
      summary: Download stock-out document as text file
      description: Downloads a formatted text document containing stock-out transaction details
      security: [{ sessionAuth: [] }]
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: string }
      responses:
        '200':
          description: Text document file
          content:
            text/plain:
              schema:
                type: string
                example: |
                  STOCK OUT DOCUMENT
                  ===================
                  Document: DOC-002
                  SKU: SKU001 - Product Name
                  Category: Electronics
                  Supplier: Supplier Name
                  Quantity: -5
                  Unit Price: 100.00
                  Total Price: 500.00
                  Created At: 2024-01-01T00:00:00.000Z
                  Created By: John Doe

                  Notes: Sale transaction
          headers:
            Content-Disposition:
              description: Attachment filename
              schema:
                type: string
                example: 'attachment; filename="stock-out-DOC-002.txt"'
        '401': { description: Unauthorized }
        '404': { description: Not Found }

  /api/analytics/dashboard:
    get:
      tags: [Analytics]
      summary: Dashboard analytics summary
      description: Aggregated metrics for dashboard cards and charts
      security: [{ sessionAuth: [] }]
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/SuccessResponse'
                  - type: object
                    properties:
                      data:
                        type: object
                        properties:
                          totalStock:
                            type: integer
                            example: 1520
                          lowStock:
                            type: array
                            items:
                              type: object
                              properties:
                                id: { type: string }
                                skuCode: { type: string }
                                name: { type: string }
                                stock: { type: integer }
                          mostOutbound:
                            type: array
                            items:
                              type: object
                              properties:
                                skuId: { type: string }
                                skuCode: { type: string }
                                name: { type: string }
                                quantity: { type: integer }
                          inventoryValue:
                            type: number
                            format: float
                            example: 125000.5
                          totalOutboundThisMonth:
                            type: integer
                            example: 340

security: [{ sessionAuth: [] }]
